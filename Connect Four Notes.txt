CONNECT FOUR Version 1.00

Plan:
-Consider how to utilize savedinstance to stop restarting the app every time onDestroy or onStop is called
-Back to main button 

29 JAN 21:
-Note: There are lots of initializing variables for this app. Conflicting T/F statements will make things very confusing later on
-Added doubletap functionality, checkers play properly
-Added method to check for all win conditions (because connect4 is not difficult to begin with...)
 **Note: If a player has checkers arranged in a manner such as 37,35,34,36 (in that order), a win condition will falsely be triggered. 
-Added reset button
-Bluetooth implementation successful...needs more testing though
-Reset works... probably

28 JAN 21:
-Added new class GameBoard to display... the game board
-Added checkers and gameboard
-Developed coordinate system for checker placement

P1 Turn: (Server)
-P1 Places a checker (input from P1 phone)
-P1 sends info to P2, then updates board, then waits until P2 acks
-P2 receives info, updates board, checks for win condition, then acks P1
-When P1 receives ack from P2, end P1 turn, send notification to P2

P2 Turn: (Client)
-P2 Places a checker (input from P2 phone)
-P2 sends info to P1, then updates board, then waits until P1 acks
-P1 receives info, updates board, checks for win condition, then acks P1
-When P2 receives ack from P1, end P2 turn, send notification to P1

42 checkers... meaning a 42 int array... o_O
also a 42 int array describing which checker is red or black (realistically a x%2 function would work for even / odd numbers)
**This would have to use values of color = 1 or 2 (NOT 0 or 1, this would be too easy to screw up...)

Formula for which checker goes where:
coord = 35+row-7*(#checkers in this column prior to the move)
Columns for this are 77 pixels wide...

row = coord%7 (if coord%7 == 0, subtract 1)

Resolving Input/Outputstream data:
-Consider parsing the values required out of the Stream...
-Example:
if output is coor:24,other:3 then parse the coor: and ,other: out and extract the values